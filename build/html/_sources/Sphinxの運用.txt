=========================
Sphinxの運用
=========================

はじめに
==========
本ドキュメントはSphinx(ドキュメント作成ツール)の運用方法について説明したものとなります。

Sphinxとは
==================

Sphinxは知的で美しいドキュメントを簡単に作れるようにするツールです。Georg Brandlによって開発され、BSDライセンスのもとで公開されています。

.. _ドキュメントの追加: 

ドキュメントの追加
==================

SphinxはソースファイルをreStructuredTextで記述する事によってコンテンツを追加できます。reStructuredTextには記法があり、それに従って記述を行う必要があります。reStructuredTextの書き方については下記を参照して下さい。
 
:doc:`reST記法のまとめ`

.. _ビルドの実行: 

ビルドの実行
==================

コンテンツを追加した後はドキュメントをビルドしてみましょう。導入時に作成したプロジェクトのディレクトリまで移動し、コマンドプロンプトで下記コマンドをタイプします。buildディレクトリにHTMLファイルが作成されているのが確認できます。
 
``make html``


ドキュメントの運用
===================

通常時の運用方法を下記に記します。

1. GitHub上のリモートリポジトリよりクローンを実施。

2. :ref:`ドキュメントの追加` を実施。

3. :ref:`ビルドの実行` を実施。

4. GitHub上のリモートリポジトリにPUSHを実施。

ドキュメントの運用ルール
===========================

*****作成中*****

- 編集前は必ずGitHubよりローカルにクローンを行い、ローカルで編集を行うこと。
- 編集後は必ず :ref:`ビルドの実行` を行い、エラー(WARNING等のメッセージ)がない状態でビルドを完了すること。
- ビルド完了後、リモートリポジトリにPUSHを行うこと。※変更が反映されないため。
- PUSHした際にコンフリクト(編集の衝突。同じ部分を同時に複数人が編集した際に発生する。)が発生した際、マージをする必要がある。その際は編集人同士が協議の上マージを完了させること。
- ドキュメントの記法に関しては既存ドキュメント及び :doc:`reST記法のまとめ` を参考の上、記述すること。

技術文書を書くための7つのルール
================================

ドキュメントを書く際にはいくつかのシンプルなルールに従う事で本当に良いドキュメントとなります。
今後あらゆる場面で適用できる7つのルールを下記に記します。

- ２つのステップで書く: まずはアイディアにフォーカスし、その後レビューを行ってテキストの形を整えます。
- 読者のターゲットを明確にする: それを読むのはだれですか？
- シンプルなスタイルを使用する: 分かり易くシンプルに保ちます。正しい文法を使用しましょう。
- 情報のスコープを絞る: 一度に1つの概念だけを導入します。
- 実在するようなコードのサンプルを使用する: Foo, Barはもうやめましょう。
- なるべく少なく、かつ十分なドキュメント: あなたが書いているのは書籍ではありません！
- テンプレートの使用: 読み手がどこに何が書いてあるかを把握しやすくなります。

参照元:http://sphinx-users.jp/articles/expertpython/tips_for_technical_writing.html